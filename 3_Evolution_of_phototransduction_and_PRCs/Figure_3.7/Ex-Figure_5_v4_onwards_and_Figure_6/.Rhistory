# install.packages("ggplot2")
# install.packages("ggrepel")
# install.packages("tidyverse")
library(ggplot2)
library(ggrepel)
library(tidyverse)
library(ggpubr)
library(RColorBrewer)
# Doing the pie for the top dataset (OGs in >3 phyla)
# Import data file
Main_data_top <- read.csv("C:\Users\ale_a\OneDrive - University of Leicester\Third_Year_Report_Paper\1_Paper\My_Working_dir\Figure_5_v4\Main_top.csv")
# Doing the pie for the top dataset (OGs in >3 phyla)
# Import data file
Main_data_top <- read.csv("C:/Users/ale_a/OneDrive - University of Leicester/Third_Year_Report_Paper/1_Paper/My_Working_dir/Figure_5_v4/Main_top.csv")
# Get the positions
Main_data_top2 <- Main_data_top %>%
mutate(csum = rev(cumsum(rev(Perc))),
pos = Perc/2 + lead(csum, 1),
pos = if_else(is.na(pos), Perc/2, pos))
# Choose colours
my_colors <- RColorBrewer::brewer.pal(8, "Set1")
# Make the plot
Main_data_top_pie <- ggplot(Main_data_top, aes(x = "" , y = Perc, fill = fct_inorder(Category))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette = "Set1") +
geom_label_repel(data = Main_data_top2,
aes(y = pos, label = paste0(Category)),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Category")) +
theme_void()
Main_data_top_pie
my_colors <- colorRampPalette(brewer.pal(3, "Set"))c(2:4)
my_colors <- colorRampPalette(brewer.pal(3, "Set")c(2:4))
palette <- brewer.pal(9, "Set1")
indices <- c(2, 5, 9)
my_colors <- palette[indices]
# Make the plot
Main_data_top_pie <- ggplot(Main_data_top, aes(x = "" , y = Perc, fill = fct_inorder(Category))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette = my_colors) +
geom_label_repel(data = Main_data_top2,
aes(y = pos, label = paste0(Category)),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Category")) +
theme_void()
# Make the plot
Main_data_top_pie <- ggplot(Main_data_top, aes(x = "" , y = Perc, fill = fct_inorder(Category))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette = brewer.pal(9, "Set1")[c(2, 5, 9)]) +
geom_label_repel(data = Main_data_top2,
aes(y = pos, label = paste0(Category)),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Category")) +
theme_void()
my_colors <- brewer.pal(9, "Set1")[c(2, 5, 9)]
# Make the plot
Main_data_top_pie <- ggplot(Main_data_top, aes(x = "" , y = Perc, fill = fct_inorder(Category))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette = my_colors) +
geom_label_repel(data = Main_data_top2,
aes(y = pos, label = paste0(Category)),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Category")) +
theme_void()
# Make the plot
Main_data_top_pie <- ggplot(Main_data_top, aes(x = "" , y = Perc, fill = fct_inorder(Category))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_manual(values = my_colors) +
geom_label_repel(data = Main_data_top2,
aes(y = pos, label = paste0(Category)),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Category")) +
theme_void()
Main_data_top_pie
# Choose colours
my_colors <- brewer.pal(9, "Set1")[c(9, 5, 2)]
# Make the plot
Main_data_top_pie <- ggplot(Main_data_top, aes(x = "" , y = Perc, fill = fct_inorder(Category))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_manual(values = my_colors) +   # Manually choosing to use the colours I defined.
geom_label_repel(data = Main_data_top2,
aes(y = pos, label = paste0(Category)),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Category")) +
theme_void()
Main_data_top_pie
library(RColorBrewer)
# Upload .csv matrix (diagonal already has values artificially set to 0)
dataR <- read.csv2("output_reordered.csv", # change input file name appropriately.
row.names = 1, header = TRUE, sep = ",") # read first row and first column as headers.
# library
library(treemap)
# Based on data updated up to 6 July 2023.
# Build Dataset
groups <- c(rep("Helix-turn-helix",8),rep("Basic Domains group",4),rep("Unclassified Structure",3),
rep("Zinc-Coordinating Group",3),rep("Beta-Scaffold Factors",2),rep("Other Alpha-Helix Group",1))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
subgroups <- c("Homeobox","ARID","Fork_head","ETS","MYB","SRF","Pou","COE",
"TF_bZIP","HLH","bHLH","AP-2",
"Others","T-box","MH1",
"zf-C2H2","RXR-like","zf-GATA",
"CSD","STAT",
"HMG")
values <- c(5,3,1,1,1,1,1,1,
7,3,3,1,
12,1,1,
5,1,1,
1,1,
4)
data <- data.frame(groups,subgroups,values)
# treemap
treemap(data,
index=c("groups","subgroups"),
vSize="values",
type="index",
fontsize.labels=c(15,12),
fontcolor.labels=c("white","black"),
fontface.labels=c(2,2),
bg.labels=c("transparent"),
align.labels=list(
c("center", "center"),
c("left", "top")
),
overlap.labels=1,
inflate.labels=F,
border.col=c("black","white"),
border.lwds=c(4,1),
title="Transcription Factor Families",
fontsize.title=18
)
# library
library(treemap)
# Based on data updated up to 6 July 2023.
# Build Dataset
groups <- c(rep("Helix-turn-helix",8),rep("Basic Domains group",4),rep("Unclassified Structure",3),
rep("Zinc-Coordinating Group",3),rep("Beta-Scaffold Factors",2),rep("Other Alpha-Helix Group",1))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
subgroups <- c("Homeobox","ARID","Fork_head","ETS","MYB","SRF","Pou","COE",
"TF_bZIP","HLH","bHLH","AP-2",
"Others","T-box","MH1",
"zf-C2H2","RXR-like","zf-GATA",
"CSD","STAT",
"HMG")
values <- c(5,3,1,1,1,1,1,1,
7,3,3,1,
12,1,1,
5,1,1,
1,1,
4)
data <- data.frame(groups,subgroups,values)
# treemap
treemap(data,
index=c("groups","subgroups"),
vSize="values",
type="index",
fontsize.labels=c(15,12),
fontcolor.labels=c("white","black"),
fontface.labels=c(2,2),
bg.labels=c("transparent"),
align.labels=list(
c("center", "center"),
c("left", "top")
),
overlap.labels=1,
inflate.labels=F,
border.col=c("black","white"),
border.lwds=c(4,1),
title="Transcription Factor Families",
fontsize.title=18
)
# treemap
treemap(data,
index=c("groups","subgroups"),
vSize="values",
type="index",
fontsize.labels=c(20,15),
fontcolor.labels=c("white","black"),
fontface.labels=c(2,2),
bg.labels=c("transparent"),
align.labels=list(
c("center", "center"),
c("left", "top")
),
overlap.labels=1,
inflate.labels=F,
border.col=c("black","white"),
border.lwds=c(4,1),
title="Transcription Factor Families",
fontsize.title=18
)
# treemap
treemap(data,
index=c("groups","subgroups"),
vSize="values",
type="index",
fontsize.labels=c(18,15),
fontcolor.labels=c("white","black"),
fontface.labels=c(2,2),
bg.labels=c("transparent"),
align.labels=list(
c("center", "center"),
c("left", "top")
),
overlap.labels=1,
inflate.labels=F,
border.col=c("black","white"),
border.lwds=c(4,1),
title="Transcription Factor Families",
fontsize.title=18
)
# treemap
treemap(data,
index=c("groups","subgroups"),
vSize="values",
type="index",
fontsize.labels=c(18,14),
fontcolor.labels=c("white","black"),
fontface.labels=c(2,2),
bg.labels=c("transparent"),
align.labels=list(
c("center", "center"),
c("left", "top")
),
overlap.labels=1,
inflate.labels=F,
border.col=c("black","white"),
border.lwds=c(4,1),
title="Transcription Factor Families",
fontsize.title=18
)
# treemap
treemap(data,
index=c("groups","subgroups"),
vSize="values",
type="index",
fontsize.labels=c(15,12),
fontcolor.labels=c("white","black"),
fontface.labels=c(2,2),
bg.labels=c("transparent"),
align.labels=list(
c("center", "center"),
c("left", "top")
),
overlap.labels=1,
inflate.labels=F,
border.col=c("black","white"),
border.lwds=c(4,1),
title="Transcription Factor Families",
fontsize.title=18
)
# treemap
treemap(data,
index=c("groups","subgroups"),
vSize="values",
type="index",
fontsize.labels=c(15,12),
fontcolor.labels=c("white","black"),
fontface.labels=c(2,2),
bg.labels=c("transparent"),
align.labels=list(
c("center", "center"),
c("left", "top")
),
overlap.labels=1,
inflate.labels=F,
border.col=c("black","white"),
border.lwds=c(4,1),
title="Transcription Factor Families",
fontsize.title=18
)
# treemap
treemap(data,
index=c("groups","subgroups"),
vSize="values",
type="index",
fontsize.labels=c(15,12),
fontcolor.labels=c("white","black"),
fontface.labels=c(2,2),
bg.labels=c("transparent"),
align.labels=list(
c("center", "center"),
c("left", "top")
),
overlap.labels=1,
inflate.labels=F,
border.col=c("black","white"),
border.lwds=c(4,1),
title="Transcription Factor Families",
fontsize.title=18
)
